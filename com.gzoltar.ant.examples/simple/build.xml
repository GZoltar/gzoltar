<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2020 GZoltar contributors.

  This file is part of GZoltar.

  GZoltar is free software: you can redistribute it and/or modify it under the terms of the GNU
  Lesser General Public License as published by the Free Software Foundation, either version 3 of
  the License, or (at your option) any later version.

  GZoltar is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
  General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License along with GZoltar. If
  not, see <https://www.gnu.org/licenses/>.
-->
<project name="Example Ant Build with GZoltar" default="rebuild" xmlns:gzoltar="antlib:com.gzoltar.ant">

  <description>
    Example Ant build file that demonstrates how GZoltar can be
    integrated into an existing build in three simple steps.
  </description>

  <property name="src.dir" location="src" />
  <property name="tests.dir" location="test" />
  <property name="build.dir" location="build" />
  <property name="build.classes.dir" location="${build.dir}/classes" />
  <property name="build.test.classes.dir" location="${build.dir}/tests" />

  <property name="gzoltar.version" value="1.7.4-SNAPSHOT" />
  <property name="gzoltar.report.dir" location="${build.dir}/gzoltar" />
  <property name="gzoltar.exec.file" location="${build.dir}/gzoltar.exec" />

  <property name="lib.dir" value="lib" />
  <property name="junit.jar" value="${lib.dir}/junit.jar" />
  <property name="hamcrest.jar" value="${lib.dir}/hamcrest-core.jar" />
  <property name="gzoltar-ant.jar" value="../../com.gzoltar.ant/target/com.gzoltar.ant-${gzoltar.version}-jar-with-dependencies.jar" />
  <property name="gzoltar-cli.jar" value="../../com.gzoltar.cli/target/com.gzoltar.cli-${gzoltar.version}-jar-with-dependencies.jar" />

  <!-- Step 1: Import GZoltar Ant tasks -->
  <taskdef uri="antlib:com.gzoltar.ant" resource="antlib.xml">
    <classpath path="${gzoltar-ant.jar}" />
  </taskdef>

  <target name="install-deps">
    <mkdir dir="${lib.dir}" />
    <get dest="${junit.jar}" src="https://repo1.maven.org/maven2/junit/junit/4.12/junit-4.12.jar" skipexisting="true" />
    <get dest="${hamcrest.jar}" src="https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar" skipexisting="true" />
  </target>

  <target name="clean">
    <delete dir="${build.dir}" />
  </target>

  <target name="compile" depends="install-deps">
    <mkdir dir="${build.classes.dir}" />
    <javac source="1.6" target="1.6"
           srcdir="${src.dir}"
           destdir="${build.classes.dir}"
           debug="true"
           includeantruntime="false"
           deprecation="false"
           optimize="false">
    </javac>

    <mkdir dir="${build.test.classes.dir}" />
    <javac source="1.6" target="1.6"
           srcdir="${tests.dir}"
           destdir="${build.test.classes.dir}">
      <classpath>
        <pathelement location="${build.classes.dir}" />
        <pathelement path="${junit.jar}" />
      </classpath>
    </javac>
  </target>

  <target name="test" depends="compile">
    <!--
      Step 2: Get list of all test method(s) to run
     -->
    <property name="test.methods.file" value="${build.classes.dir}/.test_methods.txt" />
    <delete file="${test.methods.file}" />
    <java classname="com.gzoltar.cli.Main" fork="true">
        <classpath>
            <pathelement location="${build.classes.dir}" />
            <pathelement location="${build.test.classes.dir}" />
            <pathelement path="${junit.jar}" />
            <pathelement path="${hamcrest.jar}" />
            <pathelement path="${gzoltar-cli.jar}" />
        </classpath>
        <arg value="listTestMethods" />
        <arg value="${build.test.classes.dir}" />
        <arg value="--outputFile" />
        <arg value="${test.methods.file}" />
        <arg value="--includes" />
        <arg value="org.gzoltar.examples.CharacterCounterTest#*:org.gzoltar.examples.StaticFieldTest#*" />
    </java>

    <!--
      Step 3: Get coverage of the pre-selected list of test method(s) by
      wrappring test method execution with the GZoltar coverage task
     -->
    <delete file="${gzoltar.exec.file}"/>

    <gzoltar:coverage destfile="${gzoltar.exec.file}"
                      buildLocation="${build.classes.dir}"
                      includes="*"
                      excludes="org.gzoltar.examples.*Test"
                      exclClassLoader="sun.reflect.DelegatingClassLoader"
                      inclNoLocationClasses="false"
                      output="file">
        <java classname="com.gzoltar.cli.Main" fork="true">
            <classpath>
                <pathelement location="${build.classes.dir}" />
                <pathelement location="${build.test.classes.dir}" />
                <pathelement path="${junit.jar}" />
                <pathelement path="${hamcrest.jar}" />
                <pathelement path="${gzoltar-ant.jar}" />
                <pathelement path="${gzoltar-cli.jar}" />
            </classpath>
            <jvmArg value="-XX:MaxPermSize=2048M" />
            <arg value="runTestMethods" />
            <arg value="--testMethods" />
            <arg value="${test.methods.file}" />
            <arg value="--collectCoverage" />
        </java>
    </gzoltar:coverage>
  </target>

  <target name="report" depends="test">
    <!-- Step 4: Create fault localization report -->
    <gzoltar:fl-report buildLocation="${build.classes.dir}"
                       granularity="line"
                       dataFile="${gzoltar.exec.file}"
                       outputDirectory="${gzoltar.report.dir}">
      <flFamilies>
        <flFamily name="sfl">
          <formulas>
            <formula name="barinel" />
            <formula name="dstar" />
            <formula name="ochiai" />
            <formula name="tarantula" />
            <!--<formula name="..." />-->
          </formulas>
          <metrics>
            <metric name="rho" />
            <metric name="ambiguity" />
            <metric name="entropy" />
            <!--<metric name="..." />-->
          </metrics>
          <formatters>
            <txt />
            <html views="sunburst:vertical_partition" />
          </formatters>
        </flFamily>
      </flFamilies>
    </gzoltar:fl-report>
  </target>

  <target name="rebuild" depends="clean,compile,test,report" />

</project>
